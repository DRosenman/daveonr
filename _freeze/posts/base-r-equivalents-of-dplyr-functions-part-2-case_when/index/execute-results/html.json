{
  "hash": "d7e22cb796c07ce6b5e363d030f945b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Base R Equivalents of dplyr Functions Part 2 - case_when\"\nauthor: \"Dave Rosenman\"\ndate: \"2024-05-16\"\ncategories: [R, code, tidyverse, dplyr]\n#image: \"image.jpg\"\n---\n\n\n\n\n\n\n\nThe `dplyr::case_when` function is a powerful and versatile tool for performing vectorized conditional operations within the R dplyr package. It allows users to evaluate multiple conditions and assign values based on those conditions, similar to a series of if-else statements but in a more concise and readable form. Each condition-value pair is evaluated in order, and the first true condition determines the value assigned to each element of the output vector. If none of the conditions are met, a default value can be specified using the .default argument, ensuring that any values not covered by the conditions receive a specified default. This function is particularly useful for data manipulation tasks such as creating new columns or transforming existing ones within a `mutate` call, making it a go-to solution for complex conditional logic in data wrangling workflows.\n\nHere's an example of using the `dplyr::case_when()` function to categorize numerical values based on multiple conditions. Suppose we have a data frame of people's ages, and we want to create a new column categorizing each age into groups such as \"child,\" \"teen,\" \"adult,\" \"senior\", and \"unknown\" (when the age is `NA`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Sample data frame\ndf <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Kerry\"),\n  age = c(5L, 16L, 25L, 70L, 45L, NA))\n\n# Using case_when to categorize age groups\ndf <- df %>%\n  mutate(age_group = case_when(\n    age < 13 ~ \"child\",\n    age >= 13 & age < 18 ~ \"teen\",\n    age >= 18 & age < 65 ~ \"adult\",\n    age >= 65 ~ \"senior\",\n    .default = \"unknown\"\n  ))\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age age_group\n1   Alice   5     child\n2     Bob  16      teen\n3 Charlie  25     adult\n4   David  70    senior\n5     Eve  45     adult\n6   Kerry  NA   unknown\n```\n\n\n:::\n:::\n\n* The `mutate` function is used to create a new column `age_group`.\nUsing `case_when`:\n* Condition 1: `age < 13` assigns \"child\".\n* Condition 2: `age >= 13 & age < 18` assigns \"teen\".\n* Condition 3: `age >= 18 & age < 65` assigns \"adult\".\n* Condition 4: `age >= 65` assigns \"senior\".\n.default: Any ages not covered by the specified conditions would be assigned \"unknown\". Since all numeric values are covered by conditions 1 through 4, the only value for `age` not covered by the specific conditions is `NA`.\n\n\nIn the `dplyr::case_when` function, the tilde (`~`) is used to separate each condition from its corresponding value. Each condition-value pair is specified in the format `condition ~ value`, where condition is a logical expression that returns `TRUE` or `FALSE`, and value is the value to be assigned when the condition is `TRUE`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}