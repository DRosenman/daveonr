{
  "hash": "258d4c6c65ad42d4856590e2ae42a952",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Base R Equivalents of dplyr Functions Part 1 - coalesce\"\nauthor: \"Dave Rosenman\"\ndate: \"2024-05-16\"\ncategories: [R, code, tidyverse, dplyr]\n#image: \"image.jpg\"\n---\n\n\nThe dplyr `coalesce` function is an incredibly useful function that I use often. It is similar to the SQL `COALESCE` function, another function that I use often. Given a set of vectors, it finds and keeps the first non `NA` value at each position. For example, the following code return the vector `c(1, 2, 3, 4)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\ncoalesce(c(1, NA, 3, NA), c(2, 2, 4, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\nAt position 1, the first non-NA value is 1 (from the first vector). At position 2, the first non-NA value is 2 (from the second vector, because the value at position 2 in the first vector is NA). At position 3, the first non-NA value is 3 (from the first vector). Finally, at position 4, the first non-NA value is 4 (from the second vector, because the value at position 4 in the first vector is NA). \n\nThe `coalesce` function is not limited to two vectors. You can use as many vectors as you'd like. \n\n::: {.cell}\n\n```{.r .cell-code}\ncoalesce(c(1, 2, NA, NA), c(3, 3, 3, NA), c(4, 4, 4, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\nThe vectors must be of equal length or length 1. Vectors of length 1 will be recycled. The following:\n\n::: {.cell}\n\n```{.r .cell-code}\ncoalesce(c(1, NA, NA, 5), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 3 5\n```\n\n\n:::\n:::\n\n\nIs equivalent to:\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::coalesce(c(1, NA, NA, 5), c(3, 3, 3, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 3 5\n```\n\n\n:::\n:::\n\n\nI most often use `coalesce` to replace all NA's in a vector by a single value. For example, the following code replaces all NAs with 0:\n\n::: {.cell}\n\n```{.r .cell-code}\ncoalesce(c(1, NA, NA, 5, 6), 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 5 6\n```\n\n\n:::\n:::\n\n\nHere are two alternative ways to do the same thing. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nreplace_na(c(1, NA, NA, 5, 6), 0) # this function is in the tidyr package\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, NA, NA, 5, 6)\nifelse(is.na(x), 0, x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 5 6\n```\n\n\n:::\n:::\n\n\nOf the three options I have shown so far, I prefer `coalesce` and `replace_na` (`coalesce` is a more general version of `replace_na`; `replace_na` takes a vector and a single value to replace the NAs in that vector with). Let's compare the speed of all three:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(11)\nx <- 1:10^7\nx[sample(1:10^7, size = 10^6, replace = FALSE)] <- NA\nmicrobenchmark::microbenchmark(\n  coalesce(x, 0),\n  replace_na(x, 0),\n  ifelse(is.na(x), 0, x),\n  times = 5\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                   expr      min       lq      mean   median       uq      max\n         coalesce(x, 0) 540.2089 560.6954 608.68458 586.1801 647.6283 708.7102\n       replace_na(x, 0)  52.6145  57.2055  62.83924  61.9616  70.5121  71.9025\n ifelse(is.na(x), 0, x) 304.8390 318.6630 371.67604 377.1181 386.3603 471.3998\n neval\n     5\n     5\n     5\n```\n\n\n:::\n:::\n\n\n`replace_na` is the fastest. I still tend to use `coalesce` for replacing all NAs in a vector with a single, specific value. I am the only person on my work team who uses R, but my team members use SQL and recognize the name `coalesce` in my code. For small to medium size vectors, each function runs super quick. Also, of the three methods above, `coalesce` is the most general, since it isn't limited to the case of replacing all NAs with a single value. \n\n\nIs there a base R equivalent to `dplyr::coalesce`? No. But we can easily create one using just base R code.\n \nTo think about how we would do that, let's start with two vectors:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, NA, NA)\ny <- c(2, 2, 3, NA)\ncoalesce(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3 NA\n```\n\n\n:::\n:::\n\nHow could we get the same results using the `ifelse` function? It's simple. We return the value in y when the value in x is NA. \n\n::: {.cell}\n\n```{.r .cell-code}\nifelse(is.na(x), y, x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3 NA\n```\n\n\n:::\n:::\n\nThat's simple enough. But what if we want to use three vectors?\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- c(4, 4, 4, 4)\ncoalesce(x, y, z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\nWe can start with our code from the case where we are using two vectors.\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_step_1 <- ifelse(is.na(x), y, x)\n```\n:::\n\nWhen both x and y are NA (when `ifelse(is.na(x), y, x)` gives us NA), we want to use what is in z. Otherwise we want to keep the the results from step 1 above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nifelse(is.na(output_step_1), z, output_step_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\nThat worked! But what if we want to generalize this to any number of input vectors? We can use the base R function `Reduce`. For our case where we used x, y, and z we could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n Reduce(function(x, y) ifelse(is.na(x), y, x), list(x, y, z))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n`Reduce(f, list(x, y, z))`, where `f` is a function of two variables, is the equivalent of `f(f(x, y), z)`. And `Reduce(f, list(x, y, z, a))` is equivalent to `f(f(f(x, y), z), a)`. The `Reduce` function is used to iteratively apply a function to elements of a vector or list, reducing it to a single value. It takes a function with two parameters and applies it to the first two elements of the vector, then applies the same function to the result and the next element, and so on, until all elements are combined into a single value. \n\nTo use `Reduce` to mimic `coalesce(x, y, z, ...)`, we need to apply the logic `keep_second_if_first_is_na <- function(x, y) {\nifelse(is.na(x), y, x)\n}` over and over starting from left to right. We apply it first to `x, y`, then ap",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}